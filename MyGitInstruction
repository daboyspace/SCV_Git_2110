![Droopy](droopy.jpg) 

# Работа с Git

## 1. Проверка наличия установленного Git
В терминале выполнить команду `git version`.
Если Git установлен, появится сообщение с информацией о версии программы. Иначе будет сообщение об ошибке.

## 2. Установка Git
Загружаем последнюю версию Git с официального сайта 
https://git-scm.com/downloads
Устанавливаем с настройками по умолчанию.

## 3. Настройка Git
При первом использовании Git необходимо представиться. Для этого нужно ввести в терминале две команды:
```
git config --global user.name "имя пользователя"
git config --global user.email "почта@pochta.com"
```
## 4. Инициализация репозитория
Получить репозиторий можно двумя способами.
1. В терминале переходим к папке, в которой хотим создать репозиторий и выполняем команду:
```
 git init
 ```
 2. Клонировать существующий репозиторий Git из любого места. Сделать это можно так:
 ```
 git clone <адрес репозитория>
 ```

## 5. Запись изменений в репозиторий

Каждый файл в рабочей папке (репозитории) может находиться в одном из двух состояний: под версионным контролем (отслеживаемые) и нет (неотслеживаемые).

Отслеживаемые файлы могут быть неизменёными, изменёными или подготовленными к коммиту. 


Команда `git status` отображает состояние рабочего каталога и раздела проиндексированных файлов.
С её помощью можно проверить индексацию изменений и увидеть файлы, которые не отслеживает Git.

Команда `git add` - это первая команда в цепочке операций, предписывающей Git "сохранить" снимок текущего состояния проекта в истории коммитов. Когда `git add` используется как отдельная команда, она переносит ожидающие изменения из рабочего каталога в раздел проиндексированных файлов.

Чтобы добавить отслеживание новых файлов, необходимо использовать команду `git add <filename> <filename>` для добавления нескольких файлов по имени. В случае если у вас много файлов для добавления, можно воспользоваться командой `git add`, которая добавляет отслеживание для всех новых файлов из текущей директории.

`git commit` - это команда для записи индексированных изменений в репозиторий Git. Используйте эту метку для обозначения всех вопросов, связанных с созданием, редактированием и внутренней структурой коммитов в Git. 

`git commit -m` - это команда, которая создает коммит с указанным комментарием
Выполнение коммита состояния со всеми изменениями в рабочем каталоге. Эта команда включает только изменения отслеживаемых файлов (тех, которые были в какой-то момент добавлены в историю с помощью команды `git add`).

`git commit -a` — совершит коммит, автоматически индексируя изменения в файлах проекта. Новые файлы при этом индексироваться не будут! Удаление же файлов будет учтено.

`git commit -am` - команда для опытных пользователей с параметрами -a и -m. Эта комбинация параметров создает коммит всех проиндексированных изменений и добавляет к коммиту подставленный комментарий.

Команда `git commit --amend` — это удобный способ изменить последний коммит. Она позволяет объединить проиндексированные изменения с предыдущим коммитом без создания нового коммита. Ее можно использовать для редактирования комментария к предыдущему коммиту без изменения состояния кода в нем.

`git diff` представляет собой многоцелевую команду Git, которая инициирует функцию сравнения источников данных Git — коммитов, веток, файлов и т. д. 

## 6. Просмотр истории коммитов

Для просмотра истории коммитов используется команда
```
git log
```
Данная команда перечисляет коммиты с их хеш-кодами, именем и электронной почтой автора, датой создания и сообщением коммита.

Для просмотра сокращенной истории коммитов используется команда
```
git log --oneline
```
Данная команда перечисляет коммиты с их хеш-кодами и сообщением коммита.

## 7. Перемещение между сохранениями
Перемещаться между нашими "сохранениями" можно с помощью команды 
```
git checkout
``` 
Для этого достаточно применить команду 
```
git checkout <номер коммита>
```

## 8. Работа с ветками 
Для создания новой ветки можно использовать несколько команд:
```
git branch <название новой ветки>
```
*Данная команда позволяет создать новую ветку, но при этом вы останетесь в заглавной ветке.*
```
git checkout -b <название новой ветки>
```
*Данная команда позволяет не только создать новую ветку, но и сразу же перенестись в неё.*

Для просмотра существующих веток используется команда
```
git branch
```
Для перехода из ветки в которой вы находитесь в нужную существует команда
```
git checkout <название нужной ветки>
```
Для сливания информации из нужной ветки в заглавную необходимо воспользоваться командой
```
git merge
```
*Для этого нужно:*

1. Перейти в заглавную ветку с помощью команды `git checkout <название заглавной ветки>`
2. Прописать команду для сливания информации из нужной ветки в заглавную, с указанием названия ветки с интересующей нас информацией `git merge <название ветки с интересующей информацией>`

*Таким образом нам удалось перенести нужную информацию из ветки черновика в заглавную.*

P.S.

Если при переносе информации из нужной ветки в заглавную происходит **конфликт**, меню Visual Studio Code предлагает 4 варианта по решению данного конфликта:
1. Оставить текущий вариант.
2. Использовать вариант который мы слили.
3. Оставить оба варианта.
4. Сравнить.

*Таким образом мы быстро и без особого напряга можем решить конфликт, выбрав нужный для нас вариант.*

**Если же такого не происходит и 4 варианта по решению данного конфликта не предлагаются, в таком случае МЫ ВРУЧНУЮ УДАЛЯЕМ ВСЮ НЕНУЖНЮ ИНФОРМАЦИЮ.**

После чего закоммитим наше решение конфликта командой:
```
git commit -am "Решение конфликта"
```
Для удаления ненужной ветки используется команда 
```
git branch -d <имя ненужной ветки>
```
Для принудительного удаления ветки используется команда
```
git branch -D <имя ненужной ветки>
```
Для просмотра истории с визуализацией ответвлений используется команда
```
git log --graph
```
## 9. Игнорирование файлов
1. Создаём папку с названием 
```
.gitignore
```
2. Указываем расширение файла в папке .gitignore, например:
```
.jpg
.png 
```
3. Добавляем в отслеживание файл .gitignore с помощью команды
```
git add .gitignore 
```
4. Делаем коммит с помощью команды
```
git commit -m "Add gitignore file"
```
# Работа с удалёнными репозиториями

1. Создать аккаунт на GitHub
2. Создать локальный репозиторий
3. Создать удаленный репозиторий
4. Связать удаленный репозиторий с локальным

Добавить удалённый репозиторий к проекту: 
```
git remote add <имя для репозитория> <адрес репозитория>
```
Для получения и слияния изменений из удаленного репозитория используется команда:
```
git pull 
```
Отправить изменения локального репозитория в удаленный
```
git push
```
## Pull request
1. В своем аккаунте на GitHub создать копию репозитория из другого аккаунта с помощью кнопки **Fork**
2. Клонировать копию репозитория на локальный компьютер с помощью команды
```
git clone <ссылка нужного репозитория>
``` 
3. Создать новую ветку
```
git branch <название новой ветки>
```
*или* 
```
git checkout -b <название новой ветки>
```
*чтобы сразу перенестись в новую ветку*

4. Добавить файл с инструкцией в новую ветку

*Внесите необходимые изменения в проект и сохраните их. Затем запустите команду* 
```
git status
``` 
*вы увидите внесенные изменения.*

5. Зафиксировать изменения (коммиты)

*Добавьте эти изменения в только что созданную ветку при помощи команды:*
```
git add
```
*Теперь вы можете сделать коммит этих изменений при помощи команды:*
```
git commit
```
6. Отправить изменения на GitHub

*Чтобы отправить изменения на GitHub (сделать push), нужно определить имя удаленного репозитория.*
```
git remote
```
*После определения имени можно безопасно отправить изменения на GitHub.*

7. На сайте GitHub выполнить Pull request.

*Перейдите в свой репозиторий на GitHub. Там есть кнопка «Compare & pull request» — кликните ее.*
## Возможности Markdown
Синтаксис языка Markdownи
### Запомнить!
 Жирный текст - ** /пример: " **Markdown** "

 Курсивный текст - * /пример: " *Markdown* "

 Зачёркнутый текст - ~ /пример: " ~~Markdown~~ "

 Выделяют заголовки - # в начале строки /пример: 
# Markdown 
 Показать уровень заголовка - подчёркивание знаком  - # /пример: 
- # Markdown
Нумерованные списки - обозначаются обычными цифрами 1,2,3... /пример:
1. Markdown
2. Markdown
3. Markdown

 Ненумерованные списки - обозначаются знаками * в начале строки /пример: 
* Markdown
* Markdown
* Markdown

Вложенные списки - выполняем отступы.
